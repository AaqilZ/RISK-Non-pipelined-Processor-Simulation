#ifndef _INSTRUCTION_H_
#define _INSTRUCTION_H_

#include <string>
#include <iostream>


//////////////////////////////////////////////////////////////////////////////////////////
/// @brief Instruction class
//////////////////////////////////////////////////////////////////////////////////////////
class Instruction {
  private:
    std::string binStr;                 ///< binary string of instruction
    std::string opcode;                 ///< stores the opcode of the instruction
    int rs = -1;                        ///< stores the rs register
    int rt = -1;                        ///< stores the rt register
    int rd = -1;                        ///< stores the rd register
    std::string imm;                    ///< stores the immediate field

  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Instruction constructor
    /// @details This function should take a string of MIPS assembly, parse it into relevant
    /// parts and create the instruction object to be added to the InstructionData hashmap 
    //////////////////////////////////////////////////////////////////////////////////////
    Instruction() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Deleted Copy Constructor
    //////////////////////////////////////////////////////////////////////////////////////
    Instruction(const Instruction& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~Instruction() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief parses instruction string from input file
    /// @param inst input string to be parsed
    //////////////////////////////////////////////////////////////////////////////////////
    void parseInstruction(std::string inst);

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief parses the register number from a string starting with $
    /// @param r string of format $xx or $x
    int getRegisterNumber(std::string r);

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief get offset value from string
    /// @param o string to get offset from
    int getOffset(std::string o);

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief << operator overload for output
    //////////////////////////////////////////////////////////////////////////////////////
    const std::ostream& operator<<(std::ostream& os);

    std::string getOpcode() { return opcode; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief tests the Instruction class
    //////////////////////////////////////////////////////////////////////////////////////
    void testInstruction() { }

};

#endif