#ifndef _CONTROL_H_
#define _CONTROL_H_

#include "Unit.h"
#include "Instruction.h"

//////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class for constrol unit
/// @note TODO May not need getters in this class
//////////////////////////////////////////////////////////////////////////////////////////
class Control : Unit {
  private:
    std::string  regDst   {""};             ///< false: write reg # from rt; true: write reg from rd
    std::string  jump     {""};               ///< whether to have PC jump
    std::string  branch   {""};             ///< false: PC = PC + 4; true: PC = branch
    std::string  memRead  {""};            ///< False: none; true: data memory designated by address input are moved to Read data output
    std::string  memToReg {""};           ///< false: value fed to register Write data input comes from ALU; true: value fed to the 
                                          ///  register Write data comes from the data memory
    std::string  ALUOp0   {""};             ///< true for branch
    std::string  ALUOp1   {""};             ///< true for r-format
    std::string  memWrite {""};           ///< false: none; true: data memory designated by adddress input are replaced by value on Write data input
    std::string  ALUSrc   {""};             ///< false: 2nd ALU op from 2nd reg file output; true: 2nd ALU op is sign extended 16 bits of instruction
    std::string  regWrite {""};           ///< write to reg with value on Write data input
    std::string ALUControl;         ///< control signal for main ALU (4 digits)

  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @name Constructors and Destructor
    /// @{

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor 
    Control() : Unit("Control") {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Deleted copy constructor
    Control(const Control& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    ~Control() {}

    /// @}
    //////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////
    /// @name Getters/Setters
    /// @{

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Clear all control lines
    void clear();

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets all control lines based on opcode
    ///
    /// @details Uses switch statement to set all controls given different opcodes.
    /// @param inst Const reference to the instruction
    void setControlLines(const Instruction& inst);

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get regDst
    std::string getRegDst() { return regDst; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get jump control value
    std::string getJump() { return jump; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get branch control value
    std::string getBranch() { return branch; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get memRead control value
    std::string getMemRead() { return memRead; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get memToReg control value
    std::string getMemToReg() { return memToReg; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get ALUOp0 control value
    std::string getALUOp0() { return ALUOp0; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get ALUOp1 control value
    std::string getALUOp1() { return ALUOp1; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get memWrite control value
    std::string getMemWrite() { return memWrite; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get ALUSrc control value
    std::string getALUSrc() { return ALUSrc; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get regWrite control value
    std::string getRegWrite() { return regWrite; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Get ALUControl control value
    std::string getALUControl() { return ALUControl; }

    /// @}
    //////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Operator << overload
    /// @param os Reference to ostream
    virtual std::ostream& operator<<(std::ostream& os) { return os; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief tests the Control class
    //////////////////////////////////////////////////////////////////////////////////////
    void testControl() { }
};

#endif
