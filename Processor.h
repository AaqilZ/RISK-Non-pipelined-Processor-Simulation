#ifndef _PROCESSOR_H_
#define _PROCESSOR_H_

#include <string>
#include <unordered_map>

#include "Unit.h"
#include "Instruction.h"

//////////////////////////////////////////////////////////////////////////////////////////
/// @brief Processor class
//////////////////////////////////////////////////////////////////////////////////////////
class Processor : Unit {

  private:
    std::unordered_map<std::string, Instruction> InstructionData;    ///< hashmap to store instructions
    std::unordered_map<std::string, std::string> MemoryData;         ///< hashmap to store data

  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor for class
    //////////////////////////////////////////////////////////////////////////////////////
    Processor() : Unit ("Processor") {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Copy constructor
    //////////////////////////////////////////////////////////////////////////////////////
    Processor(const Processor& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~Processor() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Method that runs the processor
    //////////////////////////////////////////////////////////////////////////////////////
    void process() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief function that must be overridden by all children
    //////////////////////////////////////////////////////////////////////////////////////
    virtual std::ostream& operator<<(const std::ostream& os) = 0;

};

#endif