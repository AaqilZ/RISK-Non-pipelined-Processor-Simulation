#ifndef _MULTIPLEXOR_H_
#define _MULTIPLEXOR_H_

#include <string>

#include "OperationUnit.h"

//////////////////////////////////////////////////////////////////////////////////////////
/// @brief Multiplexor class
//////////////////////////////////////////////////////////////////////////////////////////

class Multiplexor : public OperationUnit {
  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor for Multiplexor class
    ///
    /// @param num for this multiplexor instance (valid options 1-5)
    //////////////////////////////////////////////////////////////////////////////////////
    Multiplexor(const int num) : OperationUnit (num, "Multiplexor" + std::to_string(num)) {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Deleted Copy Constructor
    //////////////////////////////////////////////////////////////////////////////////////
    Multiplexor(const Multiplexor& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Default destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~Multiplexor() = default;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief overload of << operator to print out current state of the multiplexor
    ///
    /// @param os reference to ostream
    //////////////////////////////////////////////////////////////////////////////////////
    virtual std::ostream& operator<<(std::ostream& os) { return os; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief completes the multiplexor operation
    /// 
    /// @param cont Boolean for controlling what input is selected
    /// @param arg1 first of the binary strings to choose from
    /// @param arg2 second of the binary strings to choose from
    ///
    /// @return correct output of the two control lines
    virtual void operate(bool cont, std::string& arg1, std::string& arg2) {}

};


#endif