#ifndef _ALU_H_
#define _ALU_H_

#include "Unit.h"

class ALU : public Unit {

  private:
    int unitNum = -1;       ///< allows for identification of ALU for error handling/debugging
    string inputOne;        ///< input coming from read data 1 in the registers object
    string inputTwo;        ///< input coming from the multiplexer 
    string aluOp;           ///< control signal from ALU control that tells whether to add, sub, AND, OR
    string result;          ///< result of arithmetic and logic conducted in ALU
    bool zero;              ///< true: immediate value - register value == 0; false: else

    
  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor for ALU unit class
    ///
    /// @param num number of this ALU instance (valid options 1-3)
    //////////////////////////////////////////////////////////////////////////////////////
    ALU(const int num) : Unit("ALU" + num) { unitNum = num; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief deleted copy constructor
    ///
    /// @param other Other instance to copy
    //////////////////////////////////////////////////////////////////////////////////////
    ALU(const ALU& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~ALU() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Determines which other function to call based on control lines
    ///
    /// @param arg1 first argument for arithmetic
    /// @param arg2 second argument for arithmetic
    //////////////////////////////////////////////////////////////////////////////////////
    void control() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Handles addition
    //////////////////////////////////////////////////////////////////////////////////////
    std::string add() { return ""; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief handles subtraction
    //////////////////////////////////////////////////////////////////////////////////////
    std::string subtract() { return ""; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief handles twos comp for subtraction
    ///
    /// @param arg2 the argument to be converted to twos comp for subtraction
    //////////////////////////////////////////////////////////////////////////////////////
    std::string twosComp(std::string& arg2) { return ""; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief handles bitwise OR
    //////////////////////////////////////////////////////////////////////////////////////
    std::string bitwiseOR() { return ""; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief handles bitwise AND
    //////////////////////////////////////////////////////////////////////////////////////
    std::string bitwiseAND() { return ""; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief runs everything in the ALU
    /// @return result
    //////////////////////////////////////////////////////////////////////////////////////
    std::string run() { return ""; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief prints the current state of the ALU
    //////////////////////////////////////////////////////////////////////////////////////
    virtual std::ostream& operator<<(const std::ostream& os) {}
};

#endif