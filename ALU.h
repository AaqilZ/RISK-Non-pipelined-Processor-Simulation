#ifndef _ALU_H_
#define _ALU_H_

#include "Unit.h"

class ALU : public Unit {

  private:
    int unitNum = -1;
    
  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor for ALU unit class
    ///
    /// @param num number of this ALU instance (valid options 1-3)
    //////////////////////////////////////////////////////////////////////////////////////
    ALU(const int num) : Unit("ALU" + num) { unitNum = num; }

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief deleted copy constructor
    ///
    /// @param other Other instance to copy
    //////////////////////////////////////////////////////////////////////////////////////
    ALU(const ALU& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~ALU() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Determines which other function to call based on control lines
    ///
    /// @param arg1 first argument for arithmetic
    /// @param arg2 second argument for arithmetic
    //////////////////////////////////////////////////////////////////////////////////////
    void control(std::string& arg1, std::string& arg2) {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Handles addition
    ///
    /// @param arg1 first argument to be added together
    /// @param arg2 second argument
    //////////////////////////////////////////////////////////////////////////////////////
    std::string add(std::string& arg1, std::string& arg2) {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief handles twos comp for subtraction
    ///
    /// @param arg2 the argument to be converted to twos comp for subtraction
    //////////////////////////////////////////////////////////////////////////////////////
    std::string twosComp(std::string& arg2) {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief prints the current state of the ALU
    //////////////////////////////////////////////////////////////////////////////////////
    virtual std::ostream& operator<<(const std::ostream& os) {}
};

#endif