#ifndef _UNIT_H_
#define _UNIT_H_

#include <iostream>
#include <string>

//////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class for all units to extend. Enforces override of functions in child classes
///
/// @note Behaves like a Java interface
//////////////////////////////////////////////////////////////////////////////////////////
class Unit {
  private:
    std::string type;

  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor for class
    ///
    /// @param t the type of unit being created
    //////////////////////////////////////////////////////////////////////////////////////
    Unit(std::string t) { type = t; }
    
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Deleted Copy Constructor
    //////////////////////////////////////////////////////////////////////////////////////
    Unit(const Unit& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~Unit() {}

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief function that must be overridden by all children
    ///
    /// @param os reference to an ostream
    //////////////////////////////////////////////////////////////////////////////////////
    virtual std::ostream& operator<<(std::ostream& os) = 0;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief tests the Unit class
    //////////////////////////////////////////////////////////////////////////////////////
    void testUnit() { }
};

#endif