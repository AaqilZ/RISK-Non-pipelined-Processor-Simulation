#ifndef _OPERATION_UNIT_H_
#define _OPERATION_UNIT_H_

#include "Unit.h"

//////////////////////////////////////////////////////////////////////////////////////////
/// @brief Class for OperationUnit. Inherited by ALU and Multiplexor.
//////////////////////////////////////////////////////////////////////////////////////////
class OperationUnit : public Unit{

  private:
    int unitNum = -1;

  public:
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor for class
    ///
    /// @param type the type of unit being created
    /// @param num the Number of the unit instance
    //////////////////////////////////////////////////////////////////////////////////////
    OperationUnit(int num, std::string type) : Unit(type)  { unitNum = num; }
    
    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Deleted Copy Constructor
    //////////////////////////////////////////////////////////////////////////////////////
    OperationUnit(const OperationUnit& other) = delete;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    //////////////////////////////////////////////////////////////////////////////////////
    ~OperationUnit() = default;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief function that must be overridden by all children
    ///
    /// @param os reference to an ostream
    //////////////////////////////////////////////////////////////////////////////////////
    virtual std::ostream& operator<<(std::ostream& os) = 0;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief Determines which other function to call
    ///
    /// @param c Control line
    /// @param arg1 first argument for arithmetic
    /// @param arg2 second argument for arithmetic
    //////////////////////////////////////////////////////////////////////////////////////
    virtual void operate(bool c, std::string& arg1, std::string& arg2) = 0;

    //////////////////////////////////////////////////////////////////////////////////////
    /// @brief tests the OperationUnit class
    //////////////////////////////////////////////////////////////////////////////////////
    void testOperationUnit() { }
};

#endif